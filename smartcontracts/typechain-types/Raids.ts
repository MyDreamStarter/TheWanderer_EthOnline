/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RaidsInterface extends utils.Interface {
  contractName: "Raids";
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "claimback(uint256)": FunctionFragment;
    "crowdFundingGoal()": FunctionFragment;
    "fundingActiveTime()": FunctionFragment;
    "fundingEndTime()": FunctionFragment;
    "fundsInReserve()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "intiateProposalFunding()": FunctionFragment;
    "intiateRejection()": FunctionFragment;
    "intiateRejectionByOperator()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isCreatorStaked()": FunctionFragment;
    "isProposalCleared()": FunctionFragment;
    "isProposalRejected()": FunctionFragment;
    "mileStone(uint256)": FunctionFragment;
    "mintTicket()": FunctionFragment;
    "name()": FunctionFragment;
    "numberOfMileStones()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "proposalCreator()": FunctionFragment;
    "refundAmount(uint256)": FunctionFragment;
    "refundStatus(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "salePrice()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFundingEndTime(uint256)": FunctionFragment;
    "setFundingStartTime(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "submitMileStoneInfo(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unStake()": FunctionFragment;
    "unpauseOrPauseByOperator(bool)": FunctionFragment;
    "validate(bool,bool)": FunctionFragment;
    "withdrawFundByOperator(address,uint256,address)": FunctionFragment;
    "withdrawFunds(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdFundingGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingActiveTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundsInReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intiateProposalFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intiateRejection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intiateRejectionByOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreatorStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalCleared",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalRejected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mileStone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTicket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfMileStones",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "salePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitMileStoneInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseOrPauseByOperator",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFundByOperator",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crowdFundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingActiveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsInReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intiateProposalFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intiateRejection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intiateRejectionByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreatorStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalCleared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mileStone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfMileStones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMileStoneInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseOrPauseByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "FundWithdrawnByHandler(uint8,uint256,address)": EventFragment;
    "FundsTransferred(address,address,uint256)": EventFragment;
    "MileStoneSubmitted(string)": EventFragment;
    "RefundClaimed(uint256,address,uint256)": EventFragment;
    "Staked(uint256,bool)": EventFragment;
    "TicketMinted(uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstaked(uint256,bool)": EventFragment;
    "Validate(bool,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundWithdrawnByHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MileStoneSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Validate"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type FundWithdrawnByHandlerEvent = TypedEvent<
  [number, BigNumber, string],
  { milestoneNumber: number; amount: BigNumber; wallet: string }
>;

export type FundWithdrawnByHandlerEventFilter =
  TypedEventFilter<FundWithdrawnByHandlerEvent>;

export type FundsTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  { toWallet: string; fromWallet: string; amount: BigNumber }
>;

export type FundsTransferredEventFilter =
  TypedEventFilter<FundsTransferredEvent>;

export type MileStoneSubmittedEvent = TypedEvent<[string], { data: string }>;

export type MileStoneSubmittedEventFilter =
  TypedEventFilter<MileStoneSubmittedEvent>;

export type RefundClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { tokenId: BigNumber; owner: string; amount: BigNumber }
>;

export type RefundClaimedEventFilter = TypedEventFilter<RefundClaimedEvent>;

export type StakedEvent = TypedEvent<
  [BigNumber, boolean],
  { amount: BigNumber; state: boolean }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TicketMintedEvent = TypedEvent<
  [BigNumber, string],
  { tokenID: BigNumber; creator: string }
>;

export type TicketMintedEventFilter = TypedEventFilter<TicketMintedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnstakedEvent = TypedEvent<
  [BigNumber, boolean],
  { amount: BigNumber; state: boolean }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type ValidateEvent = TypedEvent<
  [boolean, boolean, boolean],
  { isPaused: boolean; isproposalCleared: boolean; isproposalRejected: boolean }
>;

export type ValidateEventFilter = TypedEventFilter<ValidateEvent>;

export interface Raids extends BaseContract {
  contractName: "Raids";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RaidsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    claimback(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crowdFundingGoal(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingActiveTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundsInReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    intiateProposalFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intiateRejection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intiateRejectionByOperator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCreatorStaked(overrides?: CallOverrides): Promise<[boolean]>;

    isProposalCleared(overrides?: CallOverrides): Promise<[boolean]>;

    isProposalRejected(overrides?: CallOverrides): Promise<[boolean]>;

    mileStone(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    mintTicket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberOfMileStones(overrides?: CallOverrides): Promise<[number]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(overrides?: CallOverrides): Promise<[boolean]>;

    proposalCreator(overrides?: CallOverrides): Promise<[string]>;

    refundAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refundValue: BigNumber }>;

    refundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingEndTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMileStoneInfo(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseOrPauseByOperator(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      result: boolean,
      proposalRejectedStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFundByOperator(
      wallet: string,
      amount: BigNumberish,
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      wallet: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  claimback(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crowdFundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

  fundingActiveTime(overrides?: CallOverrides): Promise<BigNumber>;

  fundingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  fundsInReserve(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  intiateProposalFunding(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intiateRejection(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intiateRejectionByOperator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCreatorStaked(overrides?: CallOverrides): Promise<boolean>;

  isProposalCleared(overrides?: CallOverrides): Promise<boolean>;

  isProposalRejected(overrides?: CallOverrides): Promise<boolean>;

  mileStone(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  mintTicket(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  numberOfMileStones(overrides?: CallOverrides): Promise<number>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(overrides?: CallOverrides): Promise<boolean>;

  proposalCreator(overrides?: CallOverrides): Promise<string>;

  refundAmount(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  refundStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salePrice(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingEndTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingStartTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMileStoneInfo(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseOrPauseByOperator(
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    result: boolean,
    proposalRejectedStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFundByOperator(
    wallet: string,
    amount: BigNumberish,
    tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    wallet: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    claimback(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    crowdFundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    fundingActiveTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundsInReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    intiateProposalFunding(overrides?: CallOverrides): Promise<void>;

    intiateRejection(overrides?: CallOverrides): Promise<void>;

    intiateRejectionByOperator(overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCreatorStaked(overrides?: CallOverrides): Promise<boolean>;

    isProposalCleared(overrides?: CallOverrides): Promise<boolean>;

    isProposalRejected(overrides?: CallOverrides): Promise<boolean>;

    mileStone(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    mintTicket(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numberOfMileStones(overrides?: CallOverrides): Promise<number>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    proposalCreator(overrides?: CallOverrides): Promise<string>;

    refundAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingEndTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingStartTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitMileStoneInfo(data: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseOrPauseByOperator(
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      result: boolean,
      proposalRejectedStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFundByOperator(
      wallet: string,
      amount: BigNumberish,
      tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFunds(
      wallet: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "FundWithdrawnByHandler(uint8,uint256,address)"(
      milestoneNumber?: null,
      amount?: null,
      wallet?: null
    ): FundWithdrawnByHandlerEventFilter;
    FundWithdrawnByHandler(
      milestoneNumber?: null,
      amount?: null,
      wallet?: null
    ): FundWithdrawnByHandlerEventFilter;

    "FundsTransferred(address,address,uint256)"(
      toWallet?: string | null,
      fromWallet?: string | null,
      amount?: BigNumberish | null
    ): FundsTransferredEventFilter;
    FundsTransferred(
      toWallet?: string | null,
      fromWallet?: string | null,
      amount?: BigNumberish | null
    ): FundsTransferredEventFilter;

    "MileStoneSubmitted(string)"(data?: null): MileStoneSubmittedEventFilter;
    MileStoneSubmitted(data?: null): MileStoneSubmittedEventFilter;

    "RefundClaimed(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): RefundClaimedEventFilter;
    RefundClaimed(
      tokenId?: BigNumberish | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): RefundClaimedEventFilter;

    "Staked(uint256,bool)"(
      amount?: BigNumberish | null,
      state?: null
    ): StakedEventFilter;
    Staked(amount?: BigNumberish | null, state?: null): StakedEventFilter;

    "TicketMinted(uint256,address)"(
      tokenID?: null,
      creator?: string | null
    ): TicketMintedEventFilter;
    TicketMinted(
      tokenID?: null,
      creator?: string | null
    ): TicketMintedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Unstaked(uint256,bool)"(
      amount?: BigNumberish | null,
      state?: null
    ): UnstakedEventFilter;
    Unstaked(amount?: BigNumberish | null, state?: null): UnstakedEventFilter;

    "Validate(bool,bool,bool)"(
      isPaused?: null,
      isproposalCleared?: null,
      isproposalRejected?: null
    ): ValidateEventFilter;
    Validate(
      isPaused?: null,
      isproposalCleared?: null,
      isproposalRejected?: null
    ): ValidateEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    claimback(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crowdFundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    fundingActiveTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundsInReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intiateProposalFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intiateRejection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intiateRejectionByOperator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreatorStaked(overrides?: CallOverrides): Promise<BigNumber>;

    isProposalCleared(overrides?: CallOverrides): Promise<BigNumber>;

    isProposalRejected(overrides?: CallOverrides): Promise<BigNumber>;

    mileStone(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTicket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfMileStones(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCreator(overrides?: CallOverrides): Promise<BigNumber>;

    refundAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salePrice(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingEndTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMileStoneInfo(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseOrPauseByOperator(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      result: boolean,
      proposalRejectedStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFundByOperator(
      wallet: string,
      amount: BigNumberish,
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      wallet: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimback(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crowdFundingGoal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingActiveTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundsInReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    intiateProposalFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intiateRejection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intiateRejectionByOperator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCreatorStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProposalCleared(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProposalRejected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mileStone(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintTicket(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfMileStones(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingEndTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingStartTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMileStoneInfo(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseOrPauseByOperator(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      result: boolean,
      proposalRejectedStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFundByOperator(
      wallet: string,
      amount: BigNumberish,
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      wallet: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

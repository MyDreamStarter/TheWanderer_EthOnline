/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ActuallyMetIRL,
  ActuallyMetIRLInterface,
} from "../ActuallyMetIRL";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ConfirmationAddressMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "partyA",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "partyB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "attestationId",
        type: "uint64",
      },
    ],
    name: "DidMeetIRL",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partyB",
        type: "address",
      },
    ],
    name: "claimMetIRL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partyA",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "confirmMetIRL",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partyA",
        type: "address",
      },
    ],
    name: "metIRLMapping",
    outputs: [
      {
        internalType: "address",
        name: "partyB",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "schemaId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "instance",
        type: "address",
      },
    ],
    name: "setSPInstance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "schemaId_",
        type: "uint64",
      },
    ],
    name: "setSchemaID",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spInstance",
    outputs: [
      {
        internalType: "contract ISP",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816041565b506091565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108dd806100a06000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638e9d660f116100665780638e9d660f1461015b578063a8c5dc331461016e578063b8662b2314610181578063bc3afdbc146101aa578063f2fde38b146101bd57600080fd5b806305ca8ee3146100a3578063075b1a09146100b8578063715018a6146100f157806371eeeb45146100f95780638da5cb5b14610136575b600080fd5b6100b66100b1366004610554565b6101d0565b005b6001546100d390600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100b6610206565b6100b6610107366004610594565b33600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100e8565b6100b6610169366004610594565b61021a565b600154610143906001600160a01b031681565b61014361018f366004610594565b6002602052600090815260409020546001600160a01b031681565b6100d36101b83660046105c5565b610244565b6100b66101cb366004610594565b61047e565b6101d86104c1565b6001805467ffffffffffffffff909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b61020e6104c1565b61021860006104ee565b565b6102226104c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260026020526040812054909133911681900361045f5760408051600280825260608201909252600091816020015b606081526020019060019003908161028257905050604080516001600160a01b038816602082015291925001604051602081830303815290604052816000815181106102d0576102d061068f565b6020026020010181905250816040516020016102fb91906001600160a01b0391909116815260200190565b6040516020818303038152906040528160018151811061031d5761031d61068f565b602090810291909101810191909152604080516101408101825260015467ffffffffffffffff600160a01b820416825260009382018490528183018490526060820184905230608083015260a0820184905260c0820184905260e0820184905261010082018590526101208201889052915163b82916cb60e01b81529092916001600160a01b03169063b82916cb906103ba908590600401610769565b6020604051808303816000875af11580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd919061088a565b604080516001600160a01b038a811682528716602082015267ffffffffffffffff83168183015290519192507fda53ae722aaee28c6a58792ed2f89d9fc515a634e83f8307f77ff7bafd84aab5919081900360600190a1935061047892505050565b60405163e481626b60e01b815260040160405180910390fd5b92915050565b6104866104c1565b6001600160a01b0381166104b557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6104be816104ee565b50565b6000546001600160a01b031633146102185760405163118cdaa760e01b81523360048201526024016104ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b67ffffffffffffffff811681146104be57600080fd5b60006020828403121561056657600080fd5b81356105718161053e565b9392505050565b80356001600160a01b038116811461058f57600080fd5b919050565b6000602082840312156105a657600080fd5b61057182610578565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156105d857600080fd5b6105e183610578565b9150602083013567ffffffffffffffff8111156105fd57600080fd5b8301601f8101851361060e57600080fd5b803567ffffffffffffffff811115610628576106286105af565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610657576106576105af565b60405281815282820160200187101561066f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600481106106c357634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b818110156106ed576020818501810151868301820152016106d1565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208501945060208160051b8301016020850160005b8381101561075d57601f198584030188526107478383516106c7565b602098890198909350919091019060010161072b565b50909695505050505050565b6080815261078460808201835167ffffffffffffffff169052565b600060208301516107a160a084018267ffffffffffffffff169052565b50604083015167ffffffffffffffff90811660c0848101919091526060850151821660e085015260808501516001600160a01b031661010085015260a08501519091166101208401528301516107fb6101408401826106a5565b5060e083015115156101608301526101008301516101406101808401526108266101c084018261070d565b9050610120840151607f19848303016101a085015261084582826106c7565b915050828103602084015261085e816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b60006020828403121561089c57600080fd5b81516105718161053e56fea264697066735822122088787a3e160cddf0cbd2bab25203e0cce07a4f2ca533cc068a836cc1eccb15ab64736f6c634300081a0033";

type ActuallyMetIRLConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ActuallyMetIRLConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ActuallyMetIRL__factory extends ContractFactory {
  constructor(...args: ActuallyMetIRLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ActuallyMetIRL";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ActuallyMetIRL> {
    return super.deploy(overrides || {}) as Promise<ActuallyMetIRL>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ActuallyMetIRL {
    return super.attach(address) as ActuallyMetIRL;
  }
  connect(signer: Signer): ActuallyMetIRL__factory {
    return super.connect(signer) as ActuallyMetIRL__factory;
  }
  static readonly contractName: "ActuallyMetIRL";
  public readonly contractName: "ActuallyMetIRL";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ActuallyMetIRLInterface {
    return new utils.Interface(_abi) as ActuallyMetIRLInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ActuallyMetIRL {
    return new Contract(address, _abi, signerOrProvider) as ActuallyMetIRL;
  }
}

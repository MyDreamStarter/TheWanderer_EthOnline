/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AttestationStruct = {
  schemaId: BigNumberish;
  linkedAttestationId: BigNumberish;
  attestTimestamp: BigNumberish;
  revokeTimestamp: BigNumberish;
  attester: string;
  validUntil: BigNumberish;
  dataLocation: BigNumberish;
  revoked: boolean;
  recipients: BytesLike[];
  data: BytesLike;
};

export type AttestationStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  number,
  boolean,
  string[],
  string
] & {
  schemaId: BigNumber;
  linkedAttestationId: BigNumber;
  attestTimestamp: BigNumber;
  revokeTimestamp: BigNumber;
  attester: string;
  validUntil: BigNumber;
  dataLocation: number;
  revoked: boolean;
  recipients: string[];
  data: string;
};

export type SchemaStruct = {
  registrant: string;
  revocable: boolean;
  dataLocation: BigNumberish;
  maxValidFor: BigNumberish;
  hook: string;
  timestamp: BigNumberish;
  data: string;
};

export type SchemaStructOutput = [
  string,
  boolean,
  number,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  registrant: string;
  revocable: boolean;
  dataLocation: number;
  maxValidFor: BigNumber;
  hook: string;
  timestamp: BigNumber;
  data: string;
};

export type OffchainAttestationStruct = {
  attester: string;
  timestamp: BigNumberish;
};

export type OffchainAttestationStructOutput = [string, BigNumber] & {
  attester: string;
  timestamp: BigNumber;
};

export interface ISPInterface extends utils.Interface {
  contractName: "ISP";
  functions: {
    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)": FunctionFragment;
    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)": FunctionFragment;
    "attestOffchain(string,address,bytes)": FunctionFragment;
    "attestOffchainBatch(string[],address,bytes)": FunctionFragment;
    "attestationCounter()": FunctionFragment;
    "getAttestation(uint64)": FunctionFragment;
    "getDelegatedAttestBatchHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[])": FunctionFragment;
    "getDelegatedAttestHash((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes))": FunctionFragment;
    "getDelegatedOffchainAttestBatchHash(string[])": FunctionFragment;
    "getDelegatedOffchainAttestHash(string)": FunctionFragment;
    "getDelegatedOffchainRevokeBatchHash(string[],string[])": FunctionFragment;
    "getDelegatedOffchainRevokeHash(string,string)": FunctionFragment;
    "getDelegatedRegisterBatchHash((address,bool,uint8,uint64,address,uint64,string)[])": FunctionFragment;
    "getDelegatedRegisterHash((address,bool,uint8,uint64,address,uint64,string))": FunctionFragment;
    "getDelegatedRevokeBatchHash(uint64[],string[])": FunctionFragment;
    "getDelegatedRevokeHash(uint64,string)": FunctionFragment;
    "getOffchainAttestation(string)": FunctionFragment;
    "getSchema(uint64)": FunctionFragment;
    "register((address,bool,uint8,uint64,address,uint64,string),bytes)": FunctionFragment;
    "registerBatch((address,bool,uint8,uint64,address,uint64,string)[],bytes)": FunctionFragment;
    "revoke(uint64,string,bytes,bytes)": FunctionFragment;
    "revokeBatch(uint64[],string[],bytes,bytes)": FunctionFragment;
    "revokeOffchain(string,string,bytes)": FunctionFragment;
    "revokeOffchainBatch(string[],string[],bytes)": FunctionFragment;
    "schemaCounter()": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attest",
    values: [
      AttestationStruct,
      string,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attestBatch",
    values: [
      AttestationStruct[],
      BigNumberish[],
      string[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attestOffchain",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attestOffchainBatch",
    values: [string[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attestationCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedAttestBatchHash",
    values: [AttestationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedAttestHash",
    values: [AttestationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedOffchainAttestBatchHash",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedOffchainAttestHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedOffchainRevokeBatchHash",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedOffchainRevokeHash",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedRegisterBatchHash",
    values: [SchemaStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedRegisterHash",
    values: [SchemaStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedRevokeBatchHash",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedRevokeHash",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffchainAttestation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [SchemaStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBatch",
    values: [SchemaStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBatch",
    values: [BigNumberish[], string[], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOffchain",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOffchainBatch",
    values: [string[], string[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestOffchainBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedAttestBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedAttestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedOffchainAttestBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedOffchainAttestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedOffchainRevokeBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedOffchainRevokeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedRegisterBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedRegisterHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedRevokeBatchHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedRevokeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOffchainAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOffchainBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AttestationMade(uint64,string)": EventFragment;
    "AttestationRevoked(uint64,string)": EventFragment;
    "OffchainAttestationMade(string)": EventFragment;
    "OffchainAttestationRevoked(string,string)": EventFragment;
    "SchemaRegistered(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttestationRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffchainAttestationMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffchainAttestationRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SchemaRegistered"): EventFragment;
}

export type AttestationMadeEvent = TypedEvent<
  [BigNumber, string],
  { attestationId: BigNumber; indexingKey: string }
>;

export type AttestationMadeEventFilter = TypedEventFilter<AttestationMadeEvent>;

export type AttestationRevokedEvent = TypedEvent<
  [BigNumber, string],
  { attestationId: BigNumber; reason: string }
>;

export type AttestationRevokedEventFilter =
  TypedEventFilter<AttestationRevokedEvent>;

export type OffchainAttestationMadeEvent = TypedEvent<
  [string],
  { attestationId: string }
>;

export type OffchainAttestationMadeEventFilter =
  TypedEventFilter<OffchainAttestationMadeEvent>;

export type OffchainAttestationRevokedEvent = TypedEvent<
  [string, string],
  { attestationId: string; reason: string }
>;

export type OffchainAttestationRevokedEventFilter =
  TypedEventFilter<OffchainAttestationRevokedEvent>;

export type SchemaRegisteredEvent = TypedEvent<
  [BigNumber],
  { schemaId: BigNumber }
>;

export type SchemaRegisteredEventFilter =
  TypedEventFilter<SchemaRegisteredEvent>;

export interface ISP extends BaseContract {
  contractName: "ISP";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)"(
      attestation: AttestationStruct,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesETH: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesETH: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestOffchain(
      offchainAttestationId: string,
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestOffchainBatch(
      offchainAttestationIds: string[],
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestationCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAttestation(
      attestationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput]>;

    getDelegatedAttestBatchHash(
      attestations: AttestationStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedAttestHash(
      attestation: AttestationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedOffchainAttestBatchHash(
      offchainAttestationIds: string[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedOffchainAttestHash(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedOffchainRevokeBatchHash(
      offchainAttestationIds: string[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedOffchainRevokeHash(
      offchainAttestationId: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedRegisterBatchHash(
      schemas: SchemaStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedRegisterHash(
      schema: SchemaStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedRevokeBatchHash(
      attestationIds: BigNumberish[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDelegatedRevokeHash(
      attestationId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOffchainAttestation(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<[OffchainAttestationStructOutput]>;

    getSchema(
      schemaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SchemaStructOutput]>;

    register(
      schema: SchemaStruct,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBatch(
      schemas: SchemaStruct[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revoke(uint64,string,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revoke(uint64,string,address,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revoke(uint64,string,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesETH: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeBatch(uint64[],string[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeBatch(uint64[],string[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesETH: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOffchain(
      offchainAttestationId: string,
      reason: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOffchainBatch(
      offchainAttestationIds: string[],
      reasons: string[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    schemaCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)"(
    attestation: AttestationStruct,
    resolverFeesERC20Token: string,
    resolverFeesERC20Amount: BigNumberish,
    indexingKey: string,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)"(
    attestation: AttestationStruct,
    indexingKey: string,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)"(
    attestation: AttestationStruct,
    resolverFeesETH: BigNumberish,
    indexingKey: string,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)"(
    attestations: AttestationStruct[],
    resolverFeesETH: BigNumberish[],
    indexingKeys: string[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)"(
    attestations: AttestationStruct[],
    resolverFeesERC20Tokens: string[],
    resolverFeesERC20Amount: BigNumberish[],
    indexingKeys: string[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)"(
    attestations: AttestationStruct[],
    indexingKeys: string[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestOffchain(
    offchainAttestationId: string,
    delegateAttester: string,
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestOffchainBatch(
    offchainAttestationIds: string[],
    delegateAttester: string,
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestationCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getAttestation(
    attestationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput>;

  getDelegatedAttestBatchHash(
    attestations: AttestationStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedAttestHash(
    attestation: AttestationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedOffchainAttestBatchHash(
    offchainAttestationIds: string[],
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedOffchainAttestHash(
    offchainAttestationId: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedOffchainRevokeBatchHash(
    offchainAttestationIds: string[],
    reasons: string[],
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedOffchainRevokeHash(
    offchainAttestationId: string,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedRegisterBatchHash(
    schemas: SchemaStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedRegisterHash(
    schema: SchemaStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedRevokeBatchHash(
    attestationIds: BigNumberish[],
    reasons: string[],
    overrides?: CallOverrides
  ): Promise<string>;

  getDelegatedRevokeHash(
    attestationId: BigNumberish,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getOffchainAttestation(
    offchainAttestationId: string,
    overrides?: CallOverrides
  ): Promise<OffchainAttestationStructOutput>;

  getSchema(
    schemaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SchemaStructOutput>;

  register(
    schema: SchemaStruct,
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBatch(
    schemas: SchemaStruct[],
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revoke(uint64,string,bytes,bytes)"(
    attestationId: BigNumberish,
    reason: string,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revoke(uint64,string,address,uint256,bytes,bytes)"(
    attestationId: BigNumberish,
    reason: string,
    resolverFeesERC20Token: string,
    resolverFeesERC20Amount: BigNumberish,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revoke(uint64,string,uint256,bytes,bytes)"(
    attestationId: BigNumberish,
    reason: string,
    resolverFeesETH: BigNumberish,
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeBatch(uint64[],string[],bytes,bytes)"(
    attestationIds: BigNumberish[],
    reasons: string[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeBatch(uint64[],string[],uint256[],bytes,bytes)"(
    attestationIds: BigNumberish[],
    reasons: string[],
    resolverFeesETH: BigNumberish[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)"(
    attestationIds: BigNumberish[],
    reasons: string[],
    resolverFeesERC20Tokens: string[],
    resolverFeesERC20Amount: BigNumberish[],
    delegateSignature: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOffchain(
    offchainAttestationId: string,
    reason: string,
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOffchainBatch(
    offchainAttestationIds: string[],
    reasons: string[],
    delegateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  schemaCounter(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)"(
      attestation: AttestationStruct,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesETH: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesETH: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    attestOffchain(
      offchainAttestationId: string,
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    attestOffchainBatch(
      offchainAttestationIds: string[],
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    attestationCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getAttestation(
      attestationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput>;

    getDelegatedAttestBatchHash(
      attestations: AttestationStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedAttestHash(
      attestation: AttestationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedOffchainAttestBatchHash(
      offchainAttestationIds: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedOffchainAttestHash(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedOffchainRevokeBatchHash(
      offchainAttestationIds: string[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedOffchainRevokeHash(
      offchainAttestationId: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedRegisterBatchHash(
      schemas: SchemaStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedRegisterHash(
      schema: SchemaStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedRevokeBatchHash(
      attestationIds: BigNumberish[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getDelegatedRevokeHash(
      attestationId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getOffchainAttestation(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<OffchainAttestationStructOutput>;

    getSchema(
      schemaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SchemaStructOutput>;

    register(
      schema: SchemaStruct,
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBatch(
      schemas: SchemaStruct[],
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "revoke(uint64,string,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revoke(uint64,string,address,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revoke(uint64,string,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesETH: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeBatch(uint64[],string[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeBatch(uint64[],string[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesETH: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOffchain(
      offchainAttestationId: string,
      reason: string,
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOffchainBatch(
      offchainAttestationIds: string[],
      reasons: string[],
      delegateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    schemaCounter(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AttestationMade(uint64,string)"(
      attestationId?: null,
      indexingKey?: null
    ): AttestationMadeEventFilter;
    AttestationMade(
      attestationId?: null,
      indexingKey?: null
    ): AttestationMadeEventFilter;

    "AttestationRevoked(uint64,string)"(
      attestationId?: null,
      reason?: null
    ): AttestationRevokedEventFilter;
    AttestationRevoked(
      attestationId?: null,
      reason?: null
    ): AttestationRevokedEventFilter;

    "OffchainAttestationMade(string)"(
      attestationId?: null
    ): OffchainAttestationMadeEventFilter;
    OffchainAttestationMade(
      attestationId?: null
    ): OffchainAttestationMadeEventFilter;

    "OffchainAttestationRevoked(string,string)"(
      attestationId?: null,
      reason?: null
    ): OffchainAttestationRevokedEventFilter;
    OffchainAttestationRevoked(
      attestationId?: null,
      reason?: null
    ): OffchainAttestationRevokedEventFilter;

    "SchemaRegistered(uint64)"(schemaId?: null): SchemaRegisteredEventFilter;
    SchemaRegistered(schemaId?: null): SchemaRegisteredEventFilter;
  };

  estimateGas: {
    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)"(
      attestation: AttestationStruct,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesETH: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesETH: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestOffchain(
      offchainAttestationId: string,
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestOffchainBatch(
      offchainAttestationIds: string[],
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestationCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getAttestation(
      attestationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedAttestBatchHash(
      attestations: AttestationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedAttestHash(
      attestation: AttestationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedOffchainAttestBatchHash(
      offchainAttestationIds: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedOffchainAttestHash(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedOffchainRevokeBatchHash(
      offchainAttestationIds: string[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedOffchainRevokeHash(
      offchainAttestationId: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedRegisterBatchHash(
      schemas: SchemaStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedRegisterHash(
      schema: SchemaStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedRevokeBatchHash(
      attestationIds: BigNumberish[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatedRevokeHash(
      attestationId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffchainAttestation(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchema(
      schemaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      schema: SchemaStruct,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBatch(
      schemas: SchemaStruct[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revoke(uint64,string,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revoke(uint64,string,address,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revoke(uint64,string,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesETH: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeBatch(uint64[],string[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeBatch(uint64[],string[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesETH: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOffchain(
      offchainAttestationId: string,
      reason: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOffchainBatch(
      offchainAttestationIds: string[],
      reasons: string[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    schemaCounter(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),address,uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),string,bytes,bytes)"(
      attestation: AttestationStruct,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "attest((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes),uint256,string,bytes,bytes)"(
      attestation: AttestationStruct,
      resolverFeesETH: BigNumberish,
      indexingKey: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesETH: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],address[],uint256[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "attestBatch((uint64,uint64,uint64,uint64,address,uint64,uint8,bool,bytes[],bytes)[],string[],bytes,bytes)"(
      attestations: AttestationStruct[],
      indexingKeys: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestOffchain(
      offchainAttestationId: string,
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestOffchainBatch(
      offchainAttestationIds: string[],
      delegateAttester: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestationCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttestation(
      attestationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedAttestBatchHash(
      attestations: AttestationStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedAttestHash(
      attestation: AttestationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedOffchainAttestBatchHash(
      offchainAttestationIds: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedOffchainAttestHash(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedOffchainRevokeBatchHash(
      offchainAttestationIds: string[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedOffchainRevokeHash(
      offchainAttestationId: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedRegisterBatchHash(
      schemas: SchemaStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedRegisterHash(
      schema: SchemaStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedRevokeBatchHash(
      attestationIds: BigNumberish[],
      reasons: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatedRevokeHash(
      attestationId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffchainAttestation(
      offchainAttestationId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchema(
      schemaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      schema: SchemaStruct,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBatch(
      schemas: SchemaStruct[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revoke(uint64,string,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revoke(uint64,string,address,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesERC20Token: string,
      resolverFeesERC20Amount: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revoke(uint64,string,uint256,bytes,bytes)"(
      attestationId: BigNumberish,
      reason: string,
      resolverFeesETH: BigNumberish,
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeBatch(uint64[],string[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeBatch(uint64[],string[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesETH: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeBatch(uint64[],string[],address[],uint256[],bytes,bytes)"(
      attestationIds: BigNumberish[],
      reasons: string[],
      resolverFeesERC20Tokens: string[],
      resolverFeesERC20Amount: BigNumberish[],
      delegateSignature: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOffchain(
      offchainAttestationId: string,
      reason: string,
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOffchainBatch(
      offchainAttestationIds: string[],
      reasons: string[],
      delegateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    schemaCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

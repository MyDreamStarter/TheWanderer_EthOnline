/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ActuallyMetIRLInterface extends utils.Interface {
  contractName: "ActuallyMetIRL";
  functions: {
    "claimMetIRL(address)": FunctionFragment;
    "confirmMetIRL(address,bytes)": FunctionFragment;
    "metIRLMapping(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "schemaId()": FunctionFragment;
    "setSPInstance(address)": FunctionFragment;
    "setSchemaID(uint64)": FunctionFragment;
    "spInstance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimMetIRL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "confirmMetIRL",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metIRLMapping",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "schemaId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSPInstance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSchemaID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimMetIRL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmMetIRL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metIRLMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schemaId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSPInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSchemaID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spInstance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DidMeetIRL(address,address,uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DidMeetIRL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DidMeetIRLEvent = TypedEvent<
  [string, string, BigNumber],
  { partyA: string; partyB: string; attestationId: BigNumber }
>;

export type DidMeetIRLEventFilter = TypedEventFilter<DidMeetIRLEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ActuallyMetIRL extends BaseContract {
  contractName: "ActuallyMetIRL";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActuallyMetIRLInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimMetIRL(
      partyB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmMetIRL(
      partyA: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    metIRLMapping(
      partyA: string,
      overrides?: CallOverrides
    ): Promise<[string] & { partyB: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    schemaId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSPInstance(
      instance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSchemaID(
      schemaId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spInstance(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimMetIRL(
    partyB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmMetIRL(
    partyA: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  metIRLMapping(partyA: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  schemaId(overrides?: CallOverrides): Promise<BigNumber>;

  setSPInstance(
    instance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSchemaID(
    schemaId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spInstance(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimMetIRL(partyB: string, overrides?: CallOverrides): Promise<void>;

    confirmMetIRL(
      partyA: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metIRLMapping(partyA: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    schemaId(overrides?: CallOverrides): Promise<BigNumber>;

    setSPInstance(instance: string, overrides?: CallOverrides): Promise<void>;

    setSchemaID(
      schemaId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spInstance(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DidMeetIRL(address,address,uint64)"(
      partyA?: null,
      partyB?: null,
      attestationId?: null
    ): DidMeetIRLEventFilter;
    DidMeetIRL(
      partyA?: null,
      partyB?: null,
      attestationId?: null
    ): DidMeetIRLEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claimMetIRL(
      partyB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmMetIRL(
      partyA: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    metIRLMapping(
      partyA: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    schemaId(overrides?: CallOverrides): Promise<BigNumber>;

    setSPInstance(
      instance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSchemaID(
      schemaId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spInstance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimMetIRL(
      partyB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmMetIRL(
      partyA: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    metIRLMapping(
      partyA: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    schemaId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSPInstance(
      instance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSchemaID(
      schemaId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spInstance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
